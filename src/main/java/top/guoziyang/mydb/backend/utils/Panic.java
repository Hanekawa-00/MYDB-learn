package top.guoziyang.mydb.backend.utils;

/**
 * Panic - 致命错误处理工具类
 * 
 * 这个类提供了MYDB系统中处理致命错误的统一机制。当系统遇到无法恢复的错误时，
 * 使用panic方法来终止程序运行并输出错误信息。
 * 
 * 与MySQL的对比：
 * - MySQL中当遇到致命错误时，会记录错误日志并可能触发服务器停机
 * - InnoDB存储引擎在遇到数据页损坏等严重问题时会触发crash recovery
 * - MYDB的Panic类简化了这一过程，直接终止程序运行
 * 
 * 设计理念：
 * 1. 快速失败（Fail-Fast）：遇到无法处理的错误时立即停止
 * 2. 错误透明：确保所有错误信息都能被开发者看到
 * 3. 系统稳定性：避免在错误状态下继续运行导致数据损坏
 * 
 * 使用场景：
 * - 数据文件损坏无法修复
 * - 内存不足导致的严重问题
 * - 系统配置错误
 * - 其他无法恢复的运行时错误
 */
public class Panic {
    
    /**
     * 处理致命错误并终止程序
     * 
     * 当系统遇到无法恢复的错误时，调用此方法来：
     * 1. 打印完整的错误堆栈信息，便于调试和问题定位
     * 2. 立即终止程序运行，避免在错误状态下继续执行
     * 
     * 实现细节：
     * - 使用printStackTrace()确保错误信息输出到标准错误流
     * - 使用System.exit(1)以非零状态码退出，表示程序异常终止
     * 
     * 与传统异常处理的区别：
     * - 传统try-catch可以让程序继续运行
     * - panic是不可恢复的，直接终止整个程序
     * 
     * @param err 需要处理的异常对象，包含错误信息和堆栈跟踪
     * 
     * 注意：此方法调用后程序将立即退出，不会返回
     */
    public static void panic(Exception err) {
        // 打印完整的错误堆栈信息到stderr
        // 这对于调试和生产环境问题定位都非常重要
        err.printStackTrace();
        
        // 以状态码1退出程序，表示异常终止
        // 状态码1在Unix/Linux系统中通常表示一般性错误
        System.exit(1);
    }
}
