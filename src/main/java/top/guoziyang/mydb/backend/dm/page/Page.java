package top.guoziyang.mydb.backend.dm.page;

/**
 * Page接口 - 数据页面的抽象定义
 * 
 * 在数据库系统中，页面(Page)是存储和管理数据的基本单位。
 * 
 * 与MySQL InnoDB的对比：
 * - MySQL InnoDB默认页面大小为16KB，MYDB使用8KB（1<<13）
 * - 都采用页面作为磁盘I/O的基本单位，减少磁盘访问次数
 * - 都实现了页面级别的锁定和脏页标记机制
 * - MySQL InnoDB有更复杂的页面类型（数据页、索引页、undo页等）
 * 
 * 页面管理的核心概念：
 * 1. 缓冲池管理：将常用页面缓存在内存中
 * 2. 脏页机制：标记被修改但未写入磁盘的页面
 * 3. 并发控制：通过锁机制保证页面访问的安全性
 * 4. 持久化：确保数据最终写入磁盘存储
 */
public interface Page {
    /**
     * 对页面加锁
     * 
     * 类似于MySQL中的页面latch（轻量级锁），用于保护页面数据结构
     * 在访问或修改页面数据时必须先获得锁，确保并发安全
     */
    void lock();
    
    /**
     * 释放页面锁
     * 
     * 与lock()配对使用，在完成页面操作后释放锁
     * 确保其他线程能够访问该页面
     */
    void unlock();
    
    /**
     * 释放页面引用
     * 
     * 当不再需要使用页面时调用，减少引用计数
     * 类似于MySQL Buffer Pool中的页面引用计数管理
     */
    void release();
    
    /**
     * 设置页面脏标记
     * 
     * @param dirty true表示页面已被修改，false表示页面未被修改
     * 
     * 脏页机制说明：
     * - 当页面数据被修改时，标记为脏页
     * - 脏页需要在适当时机写回磁盘（类似MySQL的checkpoint机制）
     * - 避免每次修改都立即写磁盘，提高性能
     */
    void setDirty(boolean dirty);
    
    /**
     * 检查页面是否为脏页
     * 
     * @return true表示页面已被修改，需要写回磁盘
     */
    boolean isDirty();
    
    /**
     * 获取页面编号
     * 
     * @return 页面的唯一标识号
     * 
     * 页面编号用于：
     * - 在磁盘文件中定位页面位置
     * - 作为缓存的key进行页面查找
     * - 计算页面在文件中的偏移量
     */
    int getPageNumber();
    
    /**
     * 获取页面数据
     * 
     * @return 页面包含的原始字节数据
     * 
     * 返回页面的完整数据内容，包括：
     * - 页面头信息（元数据）
     * - 实际存储的数据内容
     * - 空闲空间管理信息
     */
    byte[] getData();
}
